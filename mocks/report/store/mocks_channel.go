// Code generated by MockGen. DO NOT EDIT.
// Source: internal/report/store/report_channel.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// AddReport mocks base method.
func (m *MockChannel) AddReport(reportId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddReport", reportId)
}

// AddReport indicates an expected call of AddReport.
func (mr *MockChannelMockRecorder) AddReport(reportId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReport", reflect.TypeOf((*MockChannel)(nil).AddReport), reportId)
}

// Close mocks base method.
func (m *MockChannel) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockChannelMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockChannel)(nil).Close))
}

// GetReportChannel mocks base method.
func (m *MockChannel) GetReportChannel() chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportChannel")
	ret0, _ := ret[0].(chan string)
	return ret0
}

// GetReportChannel indicates an expected call of GetReportChannel.
func (mr *MockChannelMockRecorder) GetReportChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportChannel", reflect.TypeOf((*MockChannel)(nil).GetReportChannel))
}
